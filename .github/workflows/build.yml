name: Build Native
on: [ push, pull_request ]
env:
  BUILD_TYPE: Release

jobs:
  build-desktop:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: win-x64,     os: windows-latest, flags: -A x64 }
          - { name: win-x86,     os: windows-latest, flags: -A Win32 }
          - { name: win-arm64,   os: windows-latest, flags: -A ARM64 }
          - { name: linux-x64,   os: ubuntu-20.04,   flags: -GNinja, target_apt_arch: ":amd64" }
          - { name: linux-x86,   os: ubuntu-20.04,   flags: -GNinja -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32", target_apt_arch: ":i386" }
          - { name: osx-x64,     os: macos-latest,   flags: -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14 }
          # NOTE: macOS 11.0 is the first released supported by Apple Silicon.
          - { name: osx-arm64,   os: macos-latest,   flags: -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 }
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build
        shell: bash
        env:
          NAME: ${{ matrix.platform.name }}
          TARGET_APT_ARCH: ${{ matrix.platform.target_apt_arch }}
          RUNNER_OS: ${{ runner.os }}
          FLAGS: ${{ matrix.platform.flags }}
        run: ./build.sh

      - name: Compress native directory
        run: tar -cf native-${{ matrix.platform.name }}.tar native

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform.name }}
          path: native-${{ matrix.platform.name }}.tar

  build-linux-arm:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: linux-arm64, os: ubuntu-20.04,   flags: -GNinja, target_apt_arch: ":arm64", container: arm64v8/ubuntu }
          - { name: linux-arm,   os: ubuntu-20.04,   flags: -GNinja, target_apt_arch: ":armhf", container: arm32v7/ubuntu }
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.platform.container }}
          options: >
            -v ${{ github.workspace }}:/workspace
            -e NAME=${{ matrix.platform.name }}
            -e TARGET_APT_ARCH=${{ matrix.platform.target_apt_arch }}
            -e RUNNER_OS=${{ runner.os }}
            -e FLAGS=${{ matrix.platform.flags }}
            -e BUILD_TYPE=${{ env.BUILD_TYPE }}
          run: |
            cd /workspace
            ./build.sh

      - name: Get Actions user id
        id: get_uid
        run: echo "uid=$(id -u $USER)" >> $GITHUB_OUTPUT

      - name: Correct Ownership in GITHUB_WORKSPACE directory
        uses: peter-murray/reset-workspace-ownership-action@v1
        with:
          user_id: ${{ steps.get_uid.outputs.uid }}

      - name: Compress native directory
        run: tar -cf native-${{ matrix.platform.name }}.tar native

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform.name }}
          path: native-${{ matrix.platform.name }}.tar

  build-ios:
    name: ios
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build (iOS)
        run: xcodebuild -project SDL/Xcode/SDL/SDL.xcodeproj -target SDL3.xcframework -configuration Release

      - name: Prepare release (iOS)
        run: |
          mkdir -p native/ios/SDL3.xcframework/ios-arm64/SDL3.framework;
          mkdir -p native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework;
          cp SDL/Xcode/SDL/build/SDL3.xcframework/Info.plist                                           native/ios/SDL3.xcframework/Info.plist;
          cp SDL/Xcode/SDL/build/SDL3.xcframework/ios-arm64/SDL3.framework/SDL3                        native/ios/SDL3.xcframework/ios-arm64/SDL3.framework/SDL3;
          cp SDL/Xcode/SDL/build/SDL3.xcframework/ios-arm64/SDL3.framework/Info.plist                  native/ios/SDL3.xcframework/ios-arm64/SDL3.framework/Info.plist;
          cp SDL/Xcode/SDL/build/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/SDL3       native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/SDL3;
          cp SDL/Xcode/SDL/build/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/Info.plist native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/Info.plist;

      - name: Compress native directory
        run: tar -cf native-ios.tar native

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-ios
          path: native-ios.tar

  build-android:
    name: android
    runs-on: ubuntu-20.04
    env:
      NDK_VER: 23.1.7779620
      PLATFORM_VER: android-34
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: microsoft
          java-version: |
            11
            17

      - name: Install Android SDK Manager
        uses: android-actions/setup-android@v3
        with:
          packages: ''

      - name: Install Android SDK
        run: |
          sdkmanager --install "platform-tools" "platforms;$PLATFORM_VER"
          sdkmanager --install "ndk;$NDK_VER" --channel=3

      - name: Build (Android)
        run: |
          export PATH=$ANDROID_HOME/ndk/$NDK_VER:$PATH
          export OUTPUT=$PWD/native/android

          # Build SDL3
          sed -i 's/abi=.*/abi="armeabi-v7a arm64-v8a x86 x86_64"/g' ./SDL/build-scripts/androidbuildlibs.sh
          ./SDL/build-scripts/androidbuildlibs.sh NDK_LIBS_OUT="$OUTPUT"

      - name: Build SDL3 Android Java
        run: |
          export JAVA_HOME=$JAVA_HOME_11_X64
          export PATH=$JAVA_HOME_11_X64/bin:$PATH
          export OUTPUT=$PWD/SDL3-CS.Android/Jars/

          # Build SDL3 Android Java part
          cd SDL/android-project/app/src/main/java
          javac -cp $ANDROID_HOME/platforms/$PLATFORM_VER/android.jar -encoding utf8 org/libsdl/app/*.java
          jar cvf $OUTPUT/SDL3AndroidBridge.jar org/libsdl/app/*.class

      - name: Compress native directory
        run: tar -cf native-android.tar native

      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-android
          path: native-android.tar

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-jar
          path: SDL3-CS.Android/Jars/SDL3AndroidBridge.jar

  pack:
    runs-on: ubuntu-latest
    needs: [ build-desktop, build-linux-arm, build-ios, build-android ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Download native artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          merge-multiple: true

      - name: Decompress native artifacts
        run: |
          for file in native-*.tar
          do
            tar -xf "$file"
          done

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: android-jar
          path: SDL3-CS.Android/Jars/

      - name: Set version
        id: set_version
        run: |
          VERSION=$(git describe --exact-match --tags HEAD 2> /dev/null || echo "0.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Pack
        run: |
          dotnet pack SDL3-CS.Android/SDL3-CS.Android.csproj -c Release /p:Version=${{ steps.set_version.outputs.version }}
          dotnet pack SDL3-CS/SDL3-CS.csproj -c Release /p:Version=${{ steps.set_version.outputs.version }}

      - name: Upload desktop artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-SDL3-CS
          path: SDL3-CS/bin/Release/ppy.*.nupkg

      - name: Upload android artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-SDL3-CS.Android
          path: SDL3-CS.Android\bin\Release\ppy.*.nupkg

  publish:
    runs-on: ubuntu-latest
    needs: pack
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download desktop artifact
        uses: actions/download-artifact@v4
        with:
          pattern: package-*
          merge-multiple: true

      - name: Publish tagged release to nuget.org
        run: dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_API_KEY}}
